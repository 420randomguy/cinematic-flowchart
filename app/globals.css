@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 0%;
  --foreground: 0 0% 100%;
  --card: 0 0% 3%;
  --card-foreground: 0 0% 100%;
  --popover: 0 0% 3%;
  --popover-foreground: 0 0% 100%;
  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;
  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;
  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 0% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;
  --ring: 0 0% 83.9%;

  /* Connection colors */
  --connection-text: 142, 70%, 50%; /* Green for text connections */
  --connection-image: 210, 100%, 50%; /* Blue for image connections */
  --connection-lora: 280, 100%, 50%; /* Purple for lora connections */
  
  /* Sidebar width for mobile devices */
  --sidebar-width-mobile: 300px;
}

body {
  @apply bg-background text-foreground font-mono;
}

/* Ensure complete desaturation */
.bg-purple-900\/50,
.bg-red-900\/50,
.bg-blue-900\/50,
.bg-gray-900,
.bg-gray-800 {
  @apply bg-black;
}

.from-gray-900,
.to-gray-900,
.from-gray-800,
.to-gray-800,
.from-gray-700,
.to-gray-700 {
  @apply from-black to-black;
}

.bg-gray-900\/50,
.bg-gray-900\/30,
.bg-gray-800\/50,
.bg-gray-800\/30,
.bg-gray-700\/50,
.bg-gray-700\/30 {
  @apply bg-black/50;
}

.text-purple-300,
.text-red-300,
.text-blue-300 {
  @apply text-gray-300;
}

/* Preserve yellow text */
.text-yellow-300,
.text-yellow-300\/90 {
  color: rgba(253, 224, 71, 0.9);
}

.text-yellow-600,
.text-yellow-600\/70 {
  color: rgba(202, 138, 4, 0.7);
}

/* ReactFlow styling */
/* Update the node styling to add slightly rounded edges */
.react-flow__node {
  @apply shadow-none;
  border-radius: 8px; /* Reduced from 12px to 8px */
}

/* Add these styles to ensure handles are positioned correctly */
.react-flow__handle {
  position: absolute !important;
  width: 8px !important;
  height: 8px !important;
  background-color: #555 !important;
  border: 2px solid #999 !important;
  border-radius: 50% !important;
}

.react-flow__handle-left {
  left: -20px !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
}

.react-flow__handle-right {
  right: -20px !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
}

/* Color-coded handles */
.handle-text,
.react-flow__handle[data-handletype="text"] {
  background-color: hsl(142, 70%, 50%) !important;
  border-color: hsl(142, 70%, 50%) !important;
}

.handle-image,
.react-flow__handle[data-handletype="image"] {
  background-color: hsl(210, 100%, 50%) !important;
  border-color: hsl(210, 100%, 50%) !important;
}

.handle-lora,
.react-flow__handle[data-handletype="lora"] {
  background-color: hsl(280, 100%, 50%) !important;
  border-color: hsl(280, 100%, 50%) !important;
}

/* Increase the clickable area */
.react-flow__handle::after {
  content: "";
  position: absolute;
  width: 40px;
  height: 40px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: transparent;
  cursor: pointer;
  z-index: -1;
}

/* Color-coded connections - leave these for type-specific colors */
.react-flow__edge-path[data-type="text"] {
  stroke: hsl(var(--connection-text)) !important;
}

.react-flow__edge-path[data-type="image"] {
  stroke: hsl(var(--connection-image)) !important;
}

.react-flow__edge-path[data-type="lora"] {
  stroke: hsl(var(--connection-lora)) !important;
}

/* Color-coded edge paths - keep type-specific styling */
.text-connection .react-flow__edge-path {
  stroke: hsl(var(--connection-text)) !important;
}

.image-connection .react-flow__edge-path {
  stroke: hsl(var(--connection-image)) !important;
}

.lora-connection .react-flow__edge-path {
  stroke: hsl(var(--connection-lora)) !important;
}

/* Basic edge styling for edges without a specific type */
.react-flow__edge-path:not([data-type="text"]):not([data-type="image"]):not([data-type="lora"]) {
  stroke: rgba(120, 120, 120, 0.25);
  stroke-width: 0.7px;
}

/* Hide ReactFlow attribution */
.react-flow__attribution {
  display: none !important;
}

/* Hide checkmarks from select items */
[data-radix-collection-item] > svg {
  display: none !important;
}

[role="option"] svg {
  display: none !important;
}

[role="option"] {
  padding-left: 8px !important;
}

/* Utility class to prevent node dragging */
.prevent-node-drag {
  pointer-events: auto !important;
}

/* Make sure inputs and textareas inside nodes can be interacted with */
.react-flow__node textarea,
.react-flow__node input,
.react-flow__node select,
.react-flow__node button,
.react-flow__node [role="combobox"],
.react-flow__node [role="listbox"],
.react-flow__node [role="option"] {
  pointer-events: all !important;
}

/* Ensure the node itself doesn't receive drag events when interacting with inputs */
.react-flow__node:has(textarea:focus),
.react-flow__node:has(input:focus),
.react-flow__node:has(select:focus),
.react-flow__node:has([role="combobox"]:focus-within) {
  pointer-events: none !important;
}
.react-flow__node:has(textarea:focus) *,
.react-flow__node:has(input:focus) *,
.react-flow__node:has(select:focus) *,
.react-flow__node:has([role="combobox"]:focus-within) * {
  pointer-events: auto !important;
}

/* Add these styles at the end of the file */

/* Connection line styling */
.react-flow__connection-path {
  stroke-width: 1.5;
  stroke: #666;
}

/* Connection line animation */
.react-flow__edge.animated .react-flow__edge-path {
  stroke-dasharray: 5;
  animation: dashdraw 0.5s linear infinite;
}

@keyframes dashdraw {
  from {
    stroke-dashoffset: 10;
  }
}

/* Ensure textareas and inputs can be interacted with */
.react-flow__node textarea,
.react-flow__node input {
  pointer-events: all !important;
  user-select: text !important;
  -webkit-user-select: text !important;
}

/* Make sure the node itself doesn't receive drag events when interacting with inputs */
.react-flow__node:has(textarea:focus),
.react-flow__node:has(input:focus) {
  pointer-events: none !important;
}

.react-flow__node:has(textarea:focus) > *:not(textarea),
.react-flow__node:has(input:focus) > *:not(input) {
  pointer-events: none !important;
}

.react-flow__node textarea:focus,
.react-flow__node input:focus {
  pointer-events: auto !important;
  z-index: 10 !important;
}

/* Ensure the prevent-node-drag class works properly */
.prevent-node-drag {
  pointer-events: auto !important;
  user-select: text !important;
  -webkit-user-select: text !important;
}

/* Additional styles to ensure clipboard operations work */
.react-flow__node textarea {
  -webkit-user-select: auto !important;
  user-select: auto !important;
  -webkit-touch-callout: auto !important;
  -webkit-tap-highlight-color: auto !important;
}

/* Override any ReactFlow styles that might interfere with clipboard operations */
.react-flow__pane {
  -webkit-user-select: none !important;
  user-select: none !important;
}

.react-flow__node textarea {
  -webkit-user-select: text !important;
  user-select: text !important;
}

/* Ensure the textarea gets all events */
.react-flow__node textarea {
  position: relative !important;
  z-index: 5 !important;
}

/* Ensure the node doesn't interfere with textarea events */
.react-flow__node:has(textarea:focus) {
  pointer-events: none !important;
}

.react-flow__node:has(textarea:focus) > *:not(textarea) {
  pointer-events: none !important;
}

.react-flow__node textarea:focus {
  pointer-events: auto !important;
}

/* Add these styles to optimize node dragging */

/* Apply hardware acceleration to dragging nodes */
.react-flow__node.dragging {
  will-change: transform;
  transition: none !important;
  z-index: 1000 !important;
}

/* Optimize all nodes for hardware acceleration */
.react-flow__node {
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;
}

/* Optimize edges during dragging */
.react-flow__edge {
  transition: stroke 0.15s ease;
}

/* Optimize edge paths during dragging */
.react-flow__edge-path {
  transition: none !important;
}

/* Optimize the entire flow container */
.react-flow {
  will-change: transform;
}

/* Optimize panning */
.react-flow__pane {
  cursor: grab;
}

.react-flow__pane.dragging {
  cursor: grabbing;
}

/* Optimize selection */
.react-flow__nodesselection {
  z-index: 5;
  transform: translate3d(0, 0, 0);
  will-change: transform;
}

/* Optimize connection line */
.react-flow__connection-path {
  stroke-dasharray: none;
  animation: none;
}

/* Optimize connection line during active dragging */
.dragging .react-flow__connection-path {
  stroke-dasharray: 5;
  animation: dashdraw 0.5s linear infinite;
}

@keyframes dashdraw {
  from {
    stroke-dashoffset: 10;
  }
}

/* Color-coded connection lines */
.react-flow__connectionline[data-from-type="text"] {
  stroke: hsl(var(--connection-text)) !important;
}

.react-flow__connectionline[data-from-type="image"] {
  stroke: hsl(var(--connection-image)) !important;
}

.react-flow__connectionline[data-from-type="url"] {
  stroke: hsl(var(--connection-lora)) !important;
}

/*
Add these performance optimization styles at the end of the file
Optimize rendering performance
*/
.react-flow__node {
  will-change: transform;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
}

.react-flow__edge {
  will-change: stroke-dashoffset;
}

/* Add containment to improve layout performance */
.react-flow__pane {
  contain: layout paint;
}

/* Optimize animation performance */
@keyframes dashdraw {
  from {
    stroke-dashoffset: 10;
  }
  to {
    stroke-dashoffset: 0;
  }
}

/* Optimize style calculations for handles */
.react-flow__handle {
  contain: strict;
  pointer-events: auto !important;
}

/* Optimize node selections */
.react-flow__nodesselection {
  will-change: transform;
  transform: translate3d(0, 0, 0);
}

/* Reduce layout thrashing on drag */
.dragging {
  will-change: transform;
  transform: translate3d(0, 0, 0);
  z-index: 1000;
}

/* Node connection target styling */
/* Update the connection target styling with reduced opacity */
.valid-connection-target {
  box-shadow: 0 0 0 2px rgba(0, 255, 0, 0.075) !important; /* Reduced from 0.3 to 0.075 (25%) */
  border-color: rgba(0, 255, 0, 0.125) !important; /* Reduced from 0.5 to 0.125 (25%) */
  transition: all 0.2s ease !important;
}

.invalid-connection-target {
  box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.075) !important; /* Reduced from 0.3 to 0.075 (25%) */
  border-color: rgba(255, 0, 0, 0.125) !important; /* Reduced from 0.5 to 0.125 (25%) */
  transition: all 0.2s ease !important;
}

/* Add this to your CSS for the replacement indicator */
.replace-connection-target {
  box-shadow: 0 0 0 2px rgba(255, 165, 0, 0.125) !important; /* Orange for replacement */
  border-color: rgba(255, 165, 0, 0.175) !important;
}

/* Make the entire node a valid drop target for connections */
.react-flow__node {
  cursor: pointer;
}

/* Selected node styling - ONLY external effects, NO interior styling */
.node-selected {
  z-index: 10;
  position: relative;
  box-shadow: 0 0 80px rgba(100, 100, 100, 0.03); /* Reduced radius (200÷2.5=80) and opacity (0.06÷2=0.03) */
}

/* Border shimmer animation for selected nodes - ONLY affects the border */
.node-selected::after {
  content: "";
  position: absolute;
  top: -1px;
  left: -1px;
  right: -1px;
  bottom: -1px;
  border-radius: inherit;
  pointer-events: none;
  z-index: -1;
  /* Use mask to ONLY show the border and hide everything else */
  mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  mask-composite: exclude;
  -webkit-mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: source-out;
  /* Border width - much narrower */
  padding: 0.5px;
  /* Gradient for animation - much narrower transition */
  background: linear-gradient(
    135deg,
    rgba(100, 100, 100, 0.2) 0%,
    rgba(100, 100, 100, 0.2) 46%,
    rgba(180, 180, 180, 0.4) 48%,
    rgba(180, 180, 180, 0.4) 50%,
    rgba(100, 100, 100, 0.2) 52%,
    rgba(100, 100, 100, 0.2) 100%
  );
  background-size: 300% 100%;
  animation: borderGradient 3s infinite linear;
  border: none;
}

/* Animation for the border with moving gradient */
@keyframes borderGradient {
  0% {
    background-position: 0% 0;
  }
  100% {
    background-position: 300% 0;
  }
}

/* Gradient for all nodes - This must always apply regardless of selection - updated direction */
.node-gradient {
  background: linear-gradient(135deg, #000000 40%, #121212 100%) !important;
}

/* Edge shimmer animation - make as narrow as node border */
.react-flow__edge:not(.temp) .react-flow__edge-path:not([data-type="text"]):not([data-type="image"]):not([data-type="lora"]) {
  animation: edgeShimmer 3s infinite linear;
  stroke-dasharray: none;
  stroke-width: 0.7px;
}

@keyframes edgeShimmer {
  0% {
    stroke: rgba(120, 120, 120, 0.25);
    stroke-width: 0.7px;
  }
  50% {
    stroke: rgba(180, 180, 180, 0.35);
    stroke-width: 0.8px;
  }
  100% {
    stroke: rgba(120, 120, 120, 0.25);
    stroke-width: 0.7px;
  }
}

/* Connected text preview styling */
.node-text-preview {
  color: rgba(255, 222, 85, 0.9) !important;
  font-size: 9px !important;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  padding: 0 !important;
}

/* User profile dropdown styling */
.user-profile-dropdown {
  filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.5));
}

/* Image selection popup styling */
div[role="dialog"] .node-content-container {
  border-radius: 8px;
  overflow: hidden;
}

